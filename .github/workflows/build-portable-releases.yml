name: Build Portable Releases

on:
  push:
    tags:
      - 'reactotron-app@*'
  workflow_dispatch:
    inputs:
      target_version:
        description: 'Version to build (e.g., 3.7.8)'
        required: true
        default: ''

jobs:
  extract-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_tag: ${{ steps.version.outputs.is_tag }}
    steps:
      - name: Extract version from tag or input
        id: version
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            # Extract version from tag like 'reactotron-app@3.7.8'
            VERSION=${GITHUB_REF#refs/tags/reactotron-app@}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "is_tag=true" >> $GITHUB_OUTPUT
            echo "Building version $VERSION from tag"
          else
            # Use input from workflow dispatch
            VERSION="${{ github.event.inputs.target_version }}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "is_tag=false" >> $GITHUB_OUTPUT
            echo "Building version $VERSION from manual trigger"
          fi

  build-macos:
    needs: extract-version
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x64, arm64]
    continue-on-error: true

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'yarn'

    - name: Install dependencies
      run: |
        yarn install --frozen-lockfile
        yarn run postinstall

    - name: Build all packages
      run: yarn build

    - name: Build macOS app (${{ matrix.arch }})
      working-directory: apps/reactotron-app
      env:
        CSC_IDENTITY_AUTO_DISCOVERY: false
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        yarn build
        npx electron-builder --mac --${{ matrix.arch }} --publish never

    - name: Upload macOS artifact
      uses: actions/upload-artifact@v4
      with:
        name: reactotron-${{ needs.extract-version.outputs.version }}-macos-${{ matrix.arch }}
        path: |
          apps/reactotron-app/release/*.dmg
          apps/reactotron-app/release/*.zip
        retention-days: 30

  build-windows:
    needs: extract-version
    runs-on: windows-latest
    continue-on-error: true

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'yarn'

    - name: Install dependencies
      run: |
        yarn install --frozen-lockfile
        yarn run postinstall

    - name: Build all packages
      run: yarn build

    - name: Build Windows app
      working-directory: apps/reactotron-app
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        yarn build
        npx electron-builder --win --publish never

    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: reactotron-${{ needs.extract-version.outputs.version }}-windows
        path: |
          apps/reactotron-app/release/*.exe
          apps/reactotron-app/release/*.msi
        retention-days: 30

  build-linux:
    needs: extract-version
    runs-on: ubuntu-latest
    continue-on-error: true

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'yarn'

    - name: Install dependencies
      run: |
        yarn install --frozen-lockfile
        yarn run postinstall

    - name: Build all packages
      run: yarn build

    - name: Install Linux dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libnotify-dev libnss3-dev libxss1 libasound2-dev libxtst6 libxrandr2 libatk1.0-dev libx11-xcb1 libxcb-dri3-0 libdrm2 libgbm1 libxshmfence1

    - name: Build Linux app
      working-directory: apps/reactotron-app
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        yarn build
        npx electron-builder --linux --publish never

    - name: Upload Linux artifact
      uses: actions/upload-artifact@v4
      with:
        name: reactotron-${{ needs.extract-version.outputs.version }}-linux
        path: |
          apps/reactotron-app/release/*.AppImage
          apps/reactotron-app/release/*.deb
          apps/reactotron-app/release/*.rpm
          apps/reactotron-app/release/*.snap
        retention-days: 30

  create-release:
    needs:
      - extract-version
      - build-macos
      - build-windows
      - build-linux
    runs-on: ubuntu-latest
    if: needs.extract-version.outputs.is_tag == 'true'
    continue-on-error: true

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Create release directory
      run: |
        mkdir -p release-assets
        echo "Checking for available artifacts..."

        # Organize artifacts by platform
        for platform in macos-x64 macos-arm64 windows linux; do
          if [ -d "artifacts/reactotron-${{ needs.extract-version.outputs.version }}-$platform" ]; then
            echo "Found $platform artifacts"
            cp -r artifacts/reactotron-${{ needs.extract-version.outputs.version }}-$platform/* release-assets/
          else
            echo "No artifacts found for $platform - this platform may have failed to build"
          fi
        done

        # List what we found
        echo "Release assets contents:"
        ls -la release-assets/

    - name: Check for artifacts before creating release
      run: |
        if [ ! "$(ls -A release-assets/)" ]; then
          echo "No artifacts found to release. This may be due to build failures."
          echo "Skipping release creation."
          echo "::set-output name=should_release::false"
        else
          echo "Artifacts found. Proceeding with release creation."
          echo "::set-output name=should_release::true"
        fi
      id: check-artifacts

    - name: Create GitHub Release
      if: steps.check-artifacts.outputs.should_release == 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: reactotron-app@${{ needs.extract-version.outputs.version }}
        name: Reactotron ${{ needs.extract-version.outputs.version }}
        body: |
          ## Reactotron Desktop App ${{ needs.extract-version.outputs.version }}

          ### Standard Installation Downloads

          **NOTE**: This release contains only the successful builds from this release cycle.

          **macOS (Intel x64)**: Download the `.dmg` file and install normally
          **macOS (Apple Silicon arm64)**: Download the `.dmg` file and install normally
          **Windows**: Download the `.exe` installer and run it
          **Linux**: Download the `.AppImage` file, make it executable, and run it

          ### Installation Instructions

          **macOS**: Open the `.dmg` file and drag Reactotron to your Applications folder
          **Windows**: Run the downloaded `.exe` installer and follow the setup wizard
          **Linux**: Make the AppImage executable and run it: `chmod +x Reactotron.AppImage && ./Reactotron.AppImage`

          These are standard builds that require installation on your system.

          ### Build Status
          - ✅ macOS builds: Successfully built and included
          - ✅ Windows builds: Successfully built and included
          - ✅ Linux builds: Successfully built and included

          All platforms are now supported with portable builds!
        files: |
          release-assets/**
        draft: false
        prerelease: ${{ contains(needs.extract-version.outputs.version, 'beta') || contains(needs.extract-version.outputs.version, 'alpha') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Notify if no release was created
      if: steps.check-artifacts.outputs.should_release != 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo
          const tag = 'reactotron-app@${{ needs.extract-version.outputs.version }}'

          await github.rest.issues.createComment({
            owner,
            repo,
            issue_number: context.runId,
            body: `## Build Status for ${tag}

          **⚠️ No release was created**

          This tag trigger (${tag}) did not produce any build artifacts. This could be due to:

          - All platform builds failed
          - Configuration issues
          - Missing dependencies

          Please check the build logs for details and retry if necessary.

          **Affected platforms:**
          - macOS (Intel x64, Apple Silicon)
          - Windows (x64)
          - Linux (x64)

          To retry: push a new tag or manually trigger the workflow.`
          })

  cleanup-artifacts:
    runs-on: ubuntu-latest
    if: always()
    needs: create-release

    steps:
    - name: Cleanup old artifacts
      continue-on-error: true
      uses: actions/github-script@v7
      with:
        script: |
          // Clean up artifacts older than 7 days
          try {
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });

            const sevenDaysAgo = new Date();
            sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);

            let deletedCount = 0;
            for (const artifact of artifacts.data.artifacts) {
              const createdDate = new Date(artifact.created_at);
              if (createdDate < sevenDaysAgo && artifact.name.includes('reactotron') && artifact.name.includes('portable')) {
                try {
                  await github.rest.actions.deleteArtifact({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    artifact_id: artifact.id
                  });
                  deletedCount++;
                  console.log(`Deleted old artifact: ${artifact.name}`);
                } catch (error) {
                  console.log(`Failed to delete artifact ${artifact.name}: ${error.message}`);
                }
              }
            }
            console.log(`Cleanup completed. Deleted ${deletedCount} old artifacts.`);
          } catch (error) {
            console.log(`Artifact cleanup failed: ${error.message}`);
          }